name: 'Terragrunt CI/CD Pipeline'

on:
  push:
    branches:
      - master
    paths:
      - 'ec2/instance/**'
  pull_request:
    branches:
      - f/new-terragrunt-pipeline
    paths:
      - 'ec2/instance/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (plan/apply/destroy)'
        required: true
        default: 'plan'

env:
  tf_version: '1.9.5'
  tg_version: '0.67.0'
  aws_region: 'ap-southeast-3'
  working_dir: 'ec2/instance'

permissions:
  id-token: write
  contents: read
  pull_requests: write

jobs:
  terragrunt:
    name: 'Terragrunt CI/CD'
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::975050366595:role/github-actions-ec2-role
          aws-region: ${{ env.aws_region }}

      # Step 3: Install Terraform and Terragrunt
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}
      
      - name: Install Terragrunt
        run: |
          wget -O /tmp/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.tg_version }}/terragrunt_linux_amd64"
          chmod +x /tmp/terragrunt
          sudo mv /tmp/terragrunt /usr/local/bin/terragrunt

      # Step 4: Initialize Terragrunt
      - name: Initialize Terragrunt
        working-directory: ${{ env.working_dir }}
        run: terragrunt init

      # Step 5: Check Terragrunt formatting
      - name: Terragrunt Format
        working-directory: ${{ env.working_dir }}
        run: |
          echo "Checking if Terragrunt files are formatted correctly..."
          terragrunt hclfmt -check || (echo "Error: Terragrunt files are not formatted correctly. Run 'terragrunt hclfmt' to fix." && exit 1)

      # Step 6: Validate Terragrunt configuration
      - name: Validate
        working-directory: ${{ env.working_dir }}
        run: terragrunt validate

      # Step 7: Plan Terragrunt changes
      - name: Plan
        working-directory: ${{ env.working_dir }}
        run: |
          terragrunt plan -out=tfplan
          echo "Plan completed successfully!"

      # Step 8: Apply Terragrunt changes (only on push to master or when manually triggered)
      - name: Apply
        if: (github.ref == 'refs/heads/master' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        working-directory: ${{ env.working_dir }}
        run: terragrunt apply -auto-approve tfplan

      # Step 9: Destroy resources (only when manually triggered)
      - name: Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        working-directory: ${{ env.working_dir }}
        run: terragrunt destroy -auto-approve